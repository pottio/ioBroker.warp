{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.1.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\n\r\nclass Warp extends utils.Adapter {\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: 'warp',\r\n\t\t});\r\n\t\tthis.on('ready', this.onReady.bind(this));\r\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\r\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\r\n\t\t// this.on('message', this.onMessage.bind(this));\r\n\t\tthis.on('unload', this.onUnload.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\t// Initialize your adapter here\r\n\r\n\t\t// Reset the connection indicator during startup\r\n\t\tthis.setState('info.connection', false, true);\r\n\r\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\r\n\t\t// this.config:\r\n\t\tthis.log.info('config option1: ' + this.config.option1);\r\n\t\tthis.log.info('config option2: ' + this.config.option2);\r\n\r\n\t\t/*\r\n\t\tFor every state in the system there has to be also an object of type state\r\n\t\tHere a simple template for a boolean variable named \"testVariable\"\r\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\r\n\t\t*/\r\n\t\tawait this.setObjectNotExistsAsync('testVariable', {\r\n\t\t\ttype: 'state',\r\n\t\t\tcommon: {\r\n\t\t\t\tname: 'testVariable',\r\n\t\t\t\ttype: 'boolean',\r\n\t\t\t\trole: 'indicator',\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n\t\tthis.subscribeStates('testVariable');\r\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\r\n\t\t// this.subscribeStates('lights.*');\r\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\r\n\t\t// this.subscribeStates('*');\r\n\r\n\t\t/*\r\n\t\t\tsetState examples\r\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\r\n\t\t*/\r\n\t\t// the variable testVariable is set to true as command (ack=false)\r\n\t\tawait this.setStateAsync('testVariable', true);\r\n\r\n\t\t// same thing, but the value is flagged \"ack\"\r\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\r\n\t\tawait this.setStateAsync('testVariable', { val: true, ack: true });\r\n\r\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\r\n\t\tawait this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 });\r\n\r\n\t\t// examples for the checkPassword/checkGroup functions\r\n\t\tlet result = await this.checkPasswordAsync('admin', 'iobroker');\r\n\t\tthis.log.info('check user admin pw iobroker: ' + result);\r\n\r\n\t\tresult = await this.checkGroupAsync('admin', 'admin');\r\n\t\tthis.log.info('check group user admin group admin: ' + result);\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\r\n\t\t\t// clearTimeout(timeout1);\r\n\t\t\t// clearTimeout(timeout2);\r\n\t\t\t// ...\r\n\t\t\t// clearInterval(interval1);\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n\t// /**\r\n\t//  * Is called if a subscribed object changes\r\n\t//  */\r\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n\t// \tif (obj) {\r\n\t// \t\t// The object was changed\r\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n\t// \t} else {\r\n\t// \t\t// The object was deleted\r\n\t// \t\tthis.log.info(`object ${id} deleted`);\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n\t// /**\r\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n\t//  */\r\n\t// private onMessage(obj: ioBroker.Message): void {\r\n\t// \tif (typeof obj === 'object' && obj.message) {\r\n\t// \t\tif (obj.command === 'send') {\r\n\t// \t\t\t// e.g. send email or pushover or whatever\r\n\t// \t\t\tthis.log.info('send command');\r\n\r\n\t// \t\t\t// Send response in callback if required\r\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Warp(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Warp())();\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAKvB,MAAM,aAAa,MAAM,QAAQ;AAAA,EAEzB,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM,iCACF,UADE;AAAA,MAEL,MAAM;AAAA,IACP,EAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AAAA,QAKc,UAAyB;AAItC,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAI5C,SAAK,IAAI,KAAK,qBAAqB,KAAK,OAAO,OAAO;AACtD,SAAK,IAAI,KAAK,qBAAqB,KAAK,OAAO,OAAO;AAOtD,UAAM,KAAK,wBAAwB,gBAAgB;AAAA,MAClD,MAAM;AAAA,MACN,QAAQ;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA,QAAQ,CAAC;AAAA,IACV,CAAC;AAGD,SAAK,gBAAgB,cAAc;AAWnC,UAAM,KAAK,cAAc,gBAAgB,IAAI;AAI7C,UAAM,KAAK,cAAc,gBAAgB,EAAE,KAAK,MAAM,KAAK,KAAK,CAAC;AAGjE,UAAM,KAAK,cAAc,gBAAgB,EAAE,KAAK,MAAM,KAAK,MAAM,QAAQ,GAAG,CAAC;AAG7E,QAAI,SAAS,MAAM,KAAK,mBAAmB,SAAS,UAAU;AAC9D,SAAK,IAAI,KAAK,mCAAmC,MAAM;AAEvD,aAAS,MAAM,KAAK,gBAAgB,SAAS,OAAO;AACpD,SAAK,IAAI,KAAK,yCAAyC,MAAM;AAAA,EAC9D;AAAA,EAKQ,SAAS,UAA4B;AAC5C,QAAI;AAOH,eAAS;AAAA,IACV,SAAS,GAAP;AACD,eAAS;AAAA,IACV;AAAA,EACD;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AACjF,QAAI,OAAO;AAEV,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IACvE,OAAO;AAEN,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACpC;AAAA,EACD;AAmBD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,KAAK,OAAO;AAC1F,OAAO;AAEN,EAAC,OAAM,IAAI,KAAK,GAAG;AACpB;",
  "names": []
}
