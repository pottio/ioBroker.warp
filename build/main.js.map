{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\r\nimport { ContextLogger } from './lib/context-logger';\r\nimport { WarpService } from './warp/warp-service';\r\nexport class WarpAdapter extends utils.Adapter {\r\n\tprivate readonly _log: ContextLogger;\r\n\tprivate readonly _warpService: WarpService;\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: 'warp',\r\n\t\t});\r\n\r\n\t\tthis._log = new ContextLogger(this, 'Main');\r\n\t\tthis._warpService = new WarpService(this);\r\n\r\n\t\tthis.on('ready', this.onReadyAsync.bind(this));\r\n\t\tthis.on('stateChange', this.onStateChangeAsync.bind(this));\r\n\t\tthis.on('unload', this.onUnloadAsync.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReadyAsync(): Promise<void> {\r\n\t\tthis._log.info('Start initializing WARP adapter');\r\n\t\ttry {\r\n\t\t\tawait this.setStateAsync('info.connection', false, true);\r\n\r\n\t\t\tconst version = await this.getStateAsync('info.last_executed_adapter_version');\r\n\t\t\tthis._log.debug(`Adapter version on last adapter execution: '${version?.val}'`);\r\n\r\n\t\t\tawait this._warpService.initAsync(<string>(version?.val ?? '0.0.0'));\r\n\r\n\t\t\tawait this.setStateAsync('info.last_executed_adapter_version', this.version, true);\r\n\t\t} catch (e) {\r\n\t\t\tthis._log.error('Initializing failed', e)\r\n\t\t}\r\n\t\tthis._log.info('WARP adapter initialized');\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate async onUnloadAsync(callback: () => void): Promise<void> {\r\n\t\ttry {\r\n\t\t\tthis._log.info('Shutting down WARP adapter');\r\n\t\t\tawait this._warpService.terminateAsync();\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate async onStateChangeAsync(id: string, state: ioBroker.State | null | undefined): Promise<void> {\r\n\t\tif (state) {\r\n\t\t\tthis._warpService.handleStateChangedAsync(id, state);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new WarpAdapter(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new WarpAdapter())();\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAuB;AACvB,4BAA8B;AAC9B,0BAA4B;AACrB,MAAM,oBAAoB,MAAM,QAAQ;AAAA,EAIvC,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM,iCACF,UADE;AAAA,MAEL,MAAM;AAAA,IACP,EAAC;AAED,SAAK,OAAO,IAAI,oCAAc,MAAM,MAAM;AAC1C,SAAK,eAAe,IAAI,gCAAY,IAAI;AAExC,SAAK,GAAG,SAAS,KAAK,aAAa,KAAK,IAAI,CAAC;AAC7C,SAAK,GAAG,eAAe,KAAK,mBAAmB,KAAK,IAAI,CAAC;AACzD,SAAK,GAAG,UAAU,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,EAChD;AAAA,QAKc,eAA8B;AAxB7C;AAyBE,SAAK,KAAK,KAAK,iCAAiC;AAChD,QAAI;AACH,YAAM,KAAK,cAAc,mBAAmB,OAAO,IAAI;AAEvD,YAAM,UAAU,MAAM,KAAK,cAAc,oCAAoC;AAC7E,WAAK,KAAK,MAAM,+CAA+C,mCAAS,MAAM;AAE9E,YAAM,KAAK,aAAa,UAAmB,yCAAS,QAAT,YAAgB,OAAQ;AAEnE,YAAM,KAAK,cAAc,sCAAsC,KAAK,SAAS,IAAI;AAAA,IAClF,SAAS,GAAP;AACD,WAAK,KAAK,MAAM,uBAAuB,CAAC;AAAA,IACzC;AACA,SAAK,KAAK,KAAK,0BAA0B;AAAA,EAC1C;AAAA,QAKc,cAAc,UAAqC;AAChE,QAAI;AACH,WAAK,KAAK,KAAK,4BAA4B;AAC3C,YAAM,KAAK,aAAa,eAAe;AACvC,eAAS;AAAA,IACV,SAAS,GAAP;AACD,eAAS;AAAA,IACV;AAAA,EACD;AAAA,QAKc,mBAAmB,IAAY,OAAyD;AACrG,QAAI,OAAO;AACV,WAAK,aAAa,wBAAwB,IAAI,KAAK;AAAA,IACpD;AAAA,EACD;AACD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,YAAY,OAAO;AACjG,OAAO;AAEN,EAAC,OAAM,IAAI,YAAY,GAAG;AAC3B;",
  "names": []
}
