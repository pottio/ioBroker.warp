{
  "version": 3,
  "sources": ["../../src/lib/crypto.ts"],
  "sourcesContent": ["import { WarpAdapter } from '../main';\r\n\r\nexport abstract class Encryption {\r\n    public static async decrypt(adapter: WarpAdapter, value: string): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                adapter.getForeignObject('system.config', (err, obj) => {\r\n                    const result = Encryption._decrypt(\r\n                        obj && obj.native && obj.native.secret ? obj.native.secret : 'Zgfr56gFe87jJOM',\r\n                        value,\r\n                    );\r\n                    resolve(result);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static _decrypt(key: string, value: string): string {\r\n        let result = '';\r\n        for (let i = 0; i < value.length; ++i) {\r\n            result += String.fromCharCode(key[i % key.length].charCodeAt(0) ^ value.charCodeAt(i));\r\n        }\r\n        return result;\r\n    }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,MAAe,WAAW;AAAA,eACT,QAAQ,SAAsB,OAAgC;AAC9E,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,UAAI;AACA,gBAAQ,iBAAiB,iBAAiB,CAAC,KAAK,QAAQ;AACpD,gBAAM,SAAS,WAAW,SACtB,OAAO,IAAI,UAAU,IAAI,OAAO,SAAS,IAAI,OAAO,SAAS,mBAC7D,KACJ;AACA,kBAAQ,MAAM;AAAA,QAClB,CAAC;AAAA,MACL,SAAS,GAAP;AACE,eAAO,CAAC;AAAA,MACZ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,SAEe,SAAS,KAAa,OAAuB;AACxD,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACnC,gBAAU,OAAO,aAAa,IAAI,IAAI,IAAI,QAAQ,WAAW,CAAC,IAAI,MAAM,WAAW,CAAC,CAAC;AAAA,IACzF;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
