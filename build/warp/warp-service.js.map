{
  "version": 3,
  "sources": ["../../src/warp/warp-service.ts"],
  "sourcesContent": ["import { isArray, isObject } from '../lib/tools';\r\nimport { WarpAdapter } from '../main';\r\nimport { ContextLogger } from './../lib/context-logger';\r\nimport { WarpApiParameter, WarpApiSection, WarpMessage } from './models';\r\nimport { WarpApiDefinitions } from './warp-api-definitions';\r\nimport { WarpClient } from './warp-client';\r\n\r\nexport class WarpService {\r\n    private readonly _adapter: WarpAdapter;\r\n    private readonly _log: ContextLogger;\r\n    private readonly _subscribedIds: string[] = [];\r\n    private readonly _client: WarpClient;\r\n    private _apiDefinitions!: WarpApiDefinitions;\r\n\r\n    constructor(adapter: WarpAdapter) {\r\n        this._adapter = adapter;\r\n        this._log = new ContextLogger(adapter, WarpService.name)\r\n        this._client = new WarpClient(adapter);\r\n    }\r\n\r\n    public async initAsync(configurationChanged: boolean, versionBeforeUpdate: string): Promise<void> {\r\n        this._log.info('Initializing');\r\n        try {\r\n            this._log.info(`Generate API definitions for product '${this._adapter.config.product}' and model '${this._adapter.config.model}'`);\r\n            this._apiDefinitions = new WarpApiDefinitions(this._adapter.config.product, this._adapter.config.model);\r\n            if (configurationChanged) {\r\n                await this.deleteAllObjectsWithSpecificProductOrModelDefinitionAsync();\r\n            }\r\n            const parameterIdsForOverride = await this.deleteObjectsRemovedFromDefinitionsAfterAdapterUpdateAsync(versionBeforeUpdate);\r\n            await this.initialCreateOrOverrideAllObjectsAsync(parameterIdsForOverride);\r\n            await this._client.connectAsync();\r\n            this._client.webSocketMessageEmitter.on('message', async (message: WarpMessage) => this.handleWarpMessageAsync(message));\r\n        } catch (e) {\r\n            this._log.error('Initializing failed', e)\r\n        }\r\n        this._log.info('Initialized');\r\n    }\r\n\r\n\r\n    public async terminateAsync(): Promise<void> {\r\n        this._log.info('Terminating');\r\n        for (const id of this._subscribedIds) {\r\n            this._log.debug(`Unsubscribe state changes '${id}'`);\r\n            await this._adapter.unsubscribeStatesAsync(id);\r\n        }\r\n        this._client.disconnect();\r\n        this._log.info('Terminated');\r\n    }\r\n\r\n    public async handleStateChangedAsync(id: string, state: ioBroker.State): Promise<void> {\r\n        if (state.ack === false) {\r\n            this._log.info(`Handle changed state by user with id '${id}' to value '${state.val}'`);\r\n            try {\r\n                const section = this._apiDefinitions.getSectionByIdForConfig(id);\r\n                const parameter = section?.parameters.find(param => id.endsWith(param.name));\r\n                if (section && parameter && parameter.hasAction()) {\r\n                    this._log.silly(`Definition for id: ${JSON.stringify(parameter)}`);\r\n                    const payload = await this.transformPayloadAsync(state, section, parameter);\r\n                    if (parameter.actionTopic) {\r\n                        await this._client.sendMessageAsync({ topic: parameter.actionTopic, payload });\r\n                    } else {\r\n                        this._log.warn(`Invalid action definition. WARP will not be notified about changed state`);\r\n                    }\r\n                } else {\r\n                    this._log.warn(`No action definition found. WARP will not be notified about changed state`);\r\n                }\r\n            } catch (e) {\r\n                this._log.error(`Handling changed state by user failed`, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async transformPayloadAsync(state: ioBroker.State, section: WarpApiSection, parameter: WarpApiParameter): Promise<any> {\r\n        return new Promise(async (resolve) => {\r\n            switch (parameter.actionType) {\r\n                case 'update-value':\r\n                    resolve(JSON.parse(parameter.actionPayloadTemplate?.replace('#', this.toValueForPayload(state))));\r\n                    break;\r\n                case 'send-command':\r\n                    resolve(parameter.actionPayloadTemplate ? JSON.parse(parameter.actionPayloadTemplate) : null);\r\n                    break;\r\n                case 'update-config':\r\n                    const payloadParameters = section.parameters.filter(param => param.actionTopic && param.actionTopic === parameter.actionTopic);\r\n                    let payload = `{`;\r\n                    for (const payloadParameter of payloadParameters) {\r\n                        if (payloadParameter.name === parameter.name) {\r\n                            payload += `\"${payloadParameter.name}\": ${this.toValueForPayload(state)},`;\r\n                        } else {\r\n                            const otherState = await this._adapter.getStateAsync(`${section.id}.${payloadParameter.name}`);\r\n                            if (otherState) {\r\n                                payload += `\"${payloadParameter.name}\": ${this.toValueForPayload(otherState)},`;\r\n                            }\r\n                        }\r\n                    }\r\n                    payload = payload.slice(0, -1);\r\n                    payload += '}';\r\n                    resolve(JSON.parse(payload));\r\n                    break;\r\n                default:\r\n                    this._log.warn(`Api parameter action type '${parameter.actionType}' is unknown.`);\r\n                    resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    private toValueForPayload(state: ioBroker.State): string {\r\n        return typeof state.val === 'string' ? `\"${state.val}\"` : `${state.val}`;\r\n    }\r\n\r\n    private async handleWarpMessageAsync(message: WarpMessage): Promise<void> {\r\n        this._log.debug(`Process new message from WARP charger with topic '${message.topic}'`);\r\n        const section = this._apiDefinitions.getSectionByTopicForConfig(message.topic);\r\n        const parameters = section ? section.parameters : [];\r\n        this._log.silly(`Definition for topic: ${section?.toString()}`);\r\n        if (isArray(message.payload) && parameters.length === 1 && parameters[0].listItems?.length === (<[]>message.payload)?.length) {\r\n            for (let index = 0; index < parameters[0].listItems.length; index++) {\r\n                await this.setStateSafelyAsync(`${this.getSectionId(message)}.${parameters[0].name}.${parameters[0].listItems[index].name}`, (<[]>message.payload)[index]);\r\n            }\r\n        } else {\r\n            for (const property in message.payload) {\r\n                const sectionId = this.getSectionId(message);\r\n                const state = message.payload[property];\r\n                const parameter = parameters.find(param => param.name === property);\r\n                if (parameter && parameter.type === 'list' && isArray(state) && parameter.listItems?.length === (<[]>state)?.length) {\r\n                    for (let index = 0; index < parameter.listItems.length; index++) {\r\n                        await this.setStateSafelyAsync(`${sectionId}.${parameter.name}.${parameter.listItems[index].name}`, (<[]>state)[index]);\r\n                    }\r\n                } else {\r\n                    const id = `${sectionId}.${property}`;\r\n                    await this.setStateSafelyAsync(id, state);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getSectionId = (message: WarpMessage): string => message.topic.replace(/\\//g, '.');\r\n\r\n    private async setStateSafelyAsync(id: string, state: any): Promise<void> {\r\n        this._log.silly(`Set state for id: ${id}. State: '${state}'`);\r\n        await this._adapter.setObjectNotExistsAsync(id, {\r\n            type: 'state',\r\n            common: { name: '', type: 'mixed', role: 'state', read: true, write: false },\r\n            native: {},\r\n        });\r\n        if (isObject(state) || isArray(state)) {\r\n            state = JSON.stringify(state);\r\n        }\r\n        await this._adapter.setStateAsync(id, state, true);\r\n    }\r\n\r\n\r\n    private async deleteAllObjectsWithSpecificProductOrModelDefinitionAsync(): Promise<void> {\r\n        this._log.info('Product or model configuration changed since last adapter start. Delete all objects with specific API definitions for product or model');\r\n        try {\r\n            for (const section of this._apiDefinitions.getAllSections()) {\r\n                const parametersForSpecificProductOrModel = section.filterSpecificParameters();\r\n                if (parametersForSpecificProductOrModel.length === section.parameters.length && section.parameters.length !== 0) {\r\n                    this._log.debug(`All parameter definitions inside section definition are specific. Delete object with id '${section.id}'`);\r\n                    await this._adapter.delObjectAsync(section.id, { recursive: true });\r\n                } else {\r\n                    for (const parameter of parametersForSpecificProductOrModel) {\r\n                        const objectIdForDeletion = `${section.id}.${parameter.name}`;\r\n                        this._log.debug(`Parameter definition inside section '${section.id}' is specific. Delete object with id '${objectIdForDeletion}'`);\r\n                        await this._adapter.delObjectAsync(`${objectIdForDeletion}`, { recursive: true });\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this._log.error('Delete all objects with specific API definitions failed', e)\r\n        }\r\n    }\r\n\r\n    private async deleteObjectsRemovedFromDefinitionsAfterAdapterUpdateAsync(versionBeforeUpdate: string): Promise<string[]> {\r\n        this._log.info('Migrate objects if adapter version changed since last adapter start');\r\n        let parameterIdsForOverride: string[] = [];\r\n        try {\r\n            const lastMigratedAdapterVersion = this.semVerToNumber(versionBeforeUpdate);\r\n            for (const migrationKey in this._apiDefinitions.migrations) {\r\n                const migrationVersion = this.semVerToNumber(migrationKey);\r\n                if (lastMigratedAdapterVersion < migrationVersion) {\r\n                    this._log.info(`Need migrating to '${migrationKey}'. Adapter version at last start: '${versionBeforeUpdate}'`);\r\n                    const migration = this._apiDefinitions.migrations[migrationKey];\r\n                    for (const parameterId of migration.deletedParameterIds) {\r\n                        this._log.debug(`Migration to '${migrationKey}': Definition was removed for '${parameterId}'. Delete object`);\r\n                        await this._adapter.delObjectAsync(parameterId, { recursive: true });\r\n                    }\r\n                    this._log.debug(`Migration to '${migrationKey}': Need override objects with changed definitions: '${migration.changedParameterIds.toString()}'`);\r\n                    parameterIdsForOverride = [...parameterIdsForOverride, ...migration.changedParameterIds];\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this._log.error('Migrate objects failed', e)\r\n        }\r\n        return parameterIdsForOverride;\r\n    }\r\n\r\n    private semVerToNumber(version: string): number {\r\n        return +version.replace(/\\./g, '')\r\n    }\r\n\r\n    private async initialCreateOrOverrideAllObjectsAsync(parameterIdsForOverride: string[]): Promise<void> {\r\n        this._log.info(`Create if not exists of override all objects for product '${this._adapter.config.product}' and model '${this._adapter.config.model}'`);\r\n        try {\r\n            for (const section of this._apiDefinitions.getAllSectionsForConfig()) {\r\n                await this.createObjectsForSectionIfNotExistsAsync(section);\r\n                for (const parameter of section.parameters) {\r\n                    if (parameter.isRelevantFor(this._adapter.config.product, this._adapter.config.model)) {\r\n                        await this.createObjectsForParameterAndSubscribeActionAsync(section, parameter, parameterIdsForOverride);\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this._log.error('Creating or overriding objects failed', e)\r\n        }\r\n    }\r\n\r\n    private async createObjectsForSectionIfNotExistsAsync(section: WarpApiSection): Promise<void> {\r\n        if (!section.api.preventCreating) {\r\n            this._log.debug(`Create device '${section.api.id}'`);\r\n            await this._adapter.setObjectNotExistsAsync(section.api.id, {\r\n                type: 'device',\r\n                common: { name: section.api.description },\r\n                native: {},\r\n            });\r\n        }\r\n        this._log.debug(`Create channel '${section.id}'`);\r\n        await this._adapter.setObjectNotExistsAsync(section.id, {\r\n            type: 'channel',\r\n            common: { name: section.description },\r\n            native: {},\r\n        });\r\n    }\r\n\r\n    private async createObjectsForParameterAndSubscribeActionAsync(section: WarpApiSection, parameter: WarpApiParameter, parameterIdsForOverride: string[], sectionId?: string): Promise<void> {\r\n        const parameterId = `${sectionId ? sectionId : section.id}.${parameter.name}`;\r\n        let obj: ioBroker.SettableObject = { type: 'state', common: { name: parameter.description, role: '', read: true, write: parameter.hasAction() }, native: {} };\r\n        switch (parameter.type) {\r\n            case 'list':\r\n                obj = { type: 'channel', common: { name: parameter.description }, native: {} }\r\n                break;\r\n            case 'enum':\r\n                obj.common.type = 'number';\r\n                obj.common.role = 'value';\r\n                obj.common.states = parameter.enumValues;\r\n                obj.common.unit = parameter.unit;\r\n                break;\r\n            case 'number':\r\n                obj.common.type = 'number';\r\n                obj.common.role = 'value';\r\n                obj.common.states = parameter.enumValues;\r\n                obj.common.unit = parameter.unit;\r\n                obj.common.min = parameter.min;\r\n                obj.common.max = parameter.max;\r\n                break;\r\n            case 'bool':\r\n                obj.common.type = 'boolean';\r\n                obj.common.role = 'indicator';\r\n                break;\r\n            case 'button':\r\n                obj.common.type = 'boolean';\r\n                obj.common.role = 'button';\r\n                if (parameter.buttonType === 'start') obj.common.role = 'button.start';\r\n                if (parameter.buttonType === 'stop') obj.common.role = 'button.stop';\r\n                break;\r\n            case 'json':\r\n                obj.common.type = 'object';\r\n                obj.common.role = 'state';\r\n                break;\r\n            case 'text':\r\n                obj.common.type = 'string';\r\n                obj.common.role = 'text';\r\n                break;\r\n            default:\r\n                this._log.warn(`Api definition type '${parameter.type}' is unknown.`);\r\n        }\r\n\r\n        if (parameterIdsForOverride.some(paramId => paramId === parameterId)) {\r\n            this._log.debug(`Override state '${parameterId}'`);\r\n            await this._adapter.setObjectAsync(parameterId, obj);\r\n        } else {\r\n            this._log.debug(`Create state if not exists '${parameterId}'`);\r\n            await this._adapter.setObjectNotExistsAsync(parameterId, obj);\r\n        }\r\n\r\n        if (parameter.hasAction()) {\r\n            this._log.debug(`Subscribe state changes '${parameterId}'`);\r\n            await this._adapter.subscribeStatesAsync(parameterId);\r\n            this._subscribedIds.push(parameterId);\r\n        }\r\n\r\n        if (parameter.type === 'list') {\r\n            const childDefinitions = parameter.listItems ?? [];\r\n            for (const childDefinition of childDefinitions) {\r\n                await this.createObjectsForParameterAndSubscribeActionAsync(section, childDefinition, parameterIdsForOverride, parameterId);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": []
}
