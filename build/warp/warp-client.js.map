{
  "version": 3,
  "sources": ["../../src/warp/warp-client.ts"],
  "sourcesContent": ["import * as axios from 'axios';\r\nimport * as crypto from 'crypto';\r\nimport { EventEmitter } from 'events';\r\nimport WebSocketClient from 'ws';\r\nimport { WarpAdapter } from '../main';\r\nimport { ContextLogger } from './../lib/context-logger';\r\nimport { WarpMessage } from './models';\r\n\r\nexport class WarpClient {\r\n    private readonly _reconnectTimeoutInSeconds = 60;\r\n    private readonly _connectionCheckIntervalInSeconds = 15;\r\n    private readonly _maxAllowedDistanceBetweenKeepAliveInSeconds = 40;\r\n    private readonly _messageEncoding = 'utf-8';\r\n    private readonly _adapter: WarpAdapter;\r\n    private readonly _log: ContextLogger;\r\n    private _reconnectTimeout!: NodeJS.Timeout;\r\n    private _checkConnectionInterval!: NodeJS.Timeout;\r\n    private _lastReceivedKeepAliveTimestamp!: number;\r\n    private _apiBasePath!: string;\r\n    private _webSocketBasePath!: string;\r\n    private _nonceCount = 1;\r\n\r\n    private _ws: WebSocketClient | undefined;\r\n    private _successfulInitialConnection = false;\r\n    private _adapterIsShuttingDown = false;\r\n\r\n    public readonly webSocketMessageEmitter = new EventEmitter();\r\n\r\n    constructor(adapter: WarpAdapter) {\r\n        this._adapter = adapter;\r\n        this._log = new ContextLogger(adapter, WarpClient.name);\r\n        this._lastReceivedKeepAliveTimestamp = Date.now();\r\n    }\r\n\r\n    public async connectAsync(): Promise<void> {\r\n        this._log.info('Try connecting to WARP charger');\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n            const warpClient = this;\r\n            if (this._reconnectTimeout) clearTimeout(this._reconnectTimeout);\r\n            if (this._checkConnectionInterval) clearInterval(this._checkConnectionInterval);\r\n            this._apiBasePath = `http${this._adapter.config.secureConnection ? 's' : ''}://${this._adapter.config.ip}`;\r\n            this._webSocketBasePath = `ws${this._adapter.config.secureConnection ? 's' : ''}://${this._adapter.config.ip}`;\r\n            this._log.debug(`WARP charger api base path: '${this._apiBasePath}'. Websocket base path: '${this._webSocketBasePath}'`)\r\n            if (this._ws) this._ws.close();\r\n            const path = '/ws';\r\n            const authorizationToken = await this.getAuthorizationTokenAsync(path, 'GET');\r\n            this._ws = new WebSocketClient(`${this._webSocketBasePath}${path}`, authorizationToken ? { headers: { 'authorization': authorizationToken } } : undefined);\r\n            this._ws.on('open', () => warpClient.handleWebSocketConnectedAsync());\r\n            this._ws.on('message', (data) => warpClient.handleWebSocketMessageAsync(data));\r\n            this._ws.on('error', (data) => warpClient.handleWebSocketErrorAsync(data));\r\n            this._ws.on('close', (data) => warpClient.handleWebSocketDisconnectedAsync(data));\r\n        } catch (e) {\r\n            this._log.error('Connecting to WARP charger failed', e);\r\n        }\r\n    }\r\n\r\n    public disconnect(): void {\r\n        if (this._reconnectTimeout) clearTimeout(this._reconnectTimeout);\r\n        if (this._checkConnectionInterval) clearInterval(this._checkConnectionInterval);\r\n        this._adapterIsShuttingDown = true;\r\n        if (this._ws) {\r\n            this._log.info('Disconnecting from WARP charger');\r\n            this._ws.close();\r\n        }\r\n    }\r\n\r\n    public async sendMessageAsync(message: WarpMessage, method: 'PUT' | 'GET' = 'PUT'): Promise<void> {\r\n        this._log.info('Send message to WARP charger');\r\n        this._log.silly('Message: ' + JSON.stringify(message));\r\n        try {\r\n            const path = `/${message.topic}`;\r\n            const authorizationToken = await this.getAuthorizationTokenAsync(path, method);\r\n            const headers: axios.AxiosRequestHeaders = authorizationToken ? { Accept: 'application/json', Authorization: authorizationToken } : { Accept: 'application/json' };\r\n            const url = `${this._apiBasePath}${path}`;\r\n            this._log.debug(`${method}: ${url}`);\r\n            await axios.default({\r\n                headers: headers,\r\n                method: method,\r\n                url: url,\r\n                data: method === 'PUT' ? message.payload : undefined\r\n            });\r\n        } catch (e) {\r\n            this._log.error('Sending message to WARP charger failed', e);\r\n        }\r\n    }\r\n\r\n    private async getAuthorizationTokenAsync(path: string, method: string): Promise<string | undefined> {\r\n        // see https://github.com/mhoc/axios-digest-auth\r\n        if (!this._adapter.config.authEnabled) return undefined;\r\n        this._log.debug('Check credentials and authorize if needed');\r\n        try {\r\n            await axios.default({\r\n                headers: { Accept: 'application/json' },\r\n                method: 'GET',\r\n                url: `${this._apiBasePath}/credential_check`,\r\n            });\r\n            this._log.debug('No credentials needed');\r\n            return undefined;\r\n        } catch (resp1: any) {\r\n            if (resp1.response === undefined\r\n                || resp1.response.status !== 401\r\n                || !resp1.response.headers['www-authenticate']?.includes('nonce')) {\r\n                this._log.error('Need credentials, but no authorization possible', JSON.stringify(resp1));\r\n            }\r\n            this._log.debug('Need credentials. Authorize with digest access authentication');\r\n            const authDetails = resp1.response.headers['www-authenticate'].split(',').map((v: string) => v.split('='));\r\n            const nonceCount = ('00000000' + this._nonceCount++).slice(-8);\r\n            const cnonce = crypto.randomBytes(24).toString('hex');\r\n            const realm = authDetails.find((el: any) => el[0].toLowerCase().indexOf('realm') > -1)[1].replace(/\"/g, '');\r\n            const nonce = authDetails.find((el: any) => el[0].toLowerCase().indexOf('nonce') > -1)[1].replace(/\"/g, '');\r\n            const ha1 = crypto.createHash('md5').update(`${this._adapter.config.user}:${realm}:${this._adapter.config.password}`).digest('hex');\r\n            const ha2 = crypto.createHash('md5').update(`${method}:${path}`).digest('hex');\r\n            const response = crypto.createHash('md5').update(`${ha1}:${nonce}:${nonceCount}:${cnonce}:auth:${ha2}`).digest('hex');\r\n            const authorization = `Digest username=\"${this._adapter.config.user}\",realm=\"${realm}\",nonce=\"${nonce}\",uri=\"${path}\",qop=\"auth\",algorithm=\"MD5\",response=\"${response}\",nc=\"${nonceCount}\",cnonce=\"${cnonce}\"`;\r\n            return authorization;\r\n        }\r\n    }\r\n\r\n    private async handleWebSocketConnectedAsync(): Promise<void> {\r\n        this._log.info('Connected to WARP charger');\r\n        this._successfulInitialConnection = true;\r\n        await this._adapter.setStateAsync('info.connection', true, true);\r\n        this._checkConnectionInterval = setInterval(() => this.checkConnection(), this._connectionCheckIntervalInSeconds * 1000);\r\n    }\r\n\r\n    private async handleWebSocketMessageAsync(data: WebSocketClient.RawData): Promise<void> {\r\n        this._log.debug('Received new message from WARP charger via websocket');\r\n        this._log.silly(`raw data: ${data}`);\r\n        for (const s of data.toString(this._messageEncoding).split('\\n')) {\r\n            if (s.length > 1) {\r\n                const message = <WarpMessage>JSON.parse(s);\r\n                if (message.topic === 'keep-alive') {\r\n                    this._log.debug('Got keep alive from WARP charger');\r\n                    this._lastReceivedKeepAliveTimestamp = Date.now();\r\n                } else if (!this._adapterIsShuttingDown) {\r\n                    this.webSocketMessageEmitter.emit('message', message);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private async handleWebSocketErrorAsync(error: Error): Promise<void> {\r\n        this._log.error('Error occurred on websocket connection to WARP', error);\r\n    }\r\n\r\n    private async handleWebSocketDisconnectedAsync(_data: number): Promise<void> {\r\n        await this._adapter.setStateAsync('info.connection', false, true);\r\n        if (!this._adapterIsShuttingDown && this._successfulInitialConnection) {\r\n            if (_data === -1) {\r\n                this._log.warn(`Try reconnecting`);\r\n                this.connectAsync();\r\n            } else {\r\n                this._log.warn(`Unexpected disconnected from WARP charger. Try reconnecting in ${this._reconnectTimeoutInSeconds} seconds`);\r\n                this._reconnectTimeout = setTimeout(() => {\r\n                    if (!this._adapterIsShuttingDown\r\n                        && this._successfulInitialConnection\r\n                        && this.getSecondsSinceLastKeepAlive() > this._maxAllowedDistanceBetweenKeepAliveInSeconds) {\r\n                        this.connectAsync();\r\n                    }\r\n                }, this._reconnectTimeoutInSeconds * 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkConnection(): void {\r\n        this._log.debug('Check last received keep alive timestamp');\r\n        try {\r\n            const seconds = this.getSecondsSinceLastKeepAlive();\r\n            if (seconds >= 0) {\r\n                if (seconds > this._maxAllowedDistanceBetweenKeepAliveInSeconds) {\r\n                    this._log.info(`Last received keep alive timestamp is older than ${this._maxAllowedDistanceBetweenKeepAliveInSeconds} seconds`);\r\n                    this.handleWebSocketDisconnectedAsync(-1);\r\n                } else {\r\n                    this._log.debug(`Last received keep alive is ${seconds} seconds ago`);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this._log.error('Checking last received keep alive timestamp failed', e);\r\n        }\r\n    }\r\n\r\n    private getSecondsSinceLastKeepAlive(): number {\r\n        if (this._lastReceivedKeepAliveTimestamp) {\r\n            const ms = Date.now() - this._lastReceivedKeepAliveTimestamp;\r\n            return Math.floor(ms / 1000);\r\n        }\r\n        return -1;\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
